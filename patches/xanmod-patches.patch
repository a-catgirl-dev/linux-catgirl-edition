# 0009-XANMOD-block-Set-rq_affinity-to-force-complete-I-O-r.patch

From 6c75a84f9f89c848e76650cc66672246fa62843f Mon Sep 17 00:00:00 2001
From: Alexandre Frade <kernel@xanmod.org>
Date: Mon, 16 Sep 2024 15:36:01 +0000
Subject: [PATCH 09/19] XANMOD: block: Set rq_affinity to force complete I/O
 requests on same CPU

Signed-off-by: Alexandre Frade <kernel@xanmod.org>
---
 include/linux/blkdev.h | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 9a1f0ee40b56..e0dc23a234ce 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -647,7 +647,8 @@ enum {
 	QUEUE_FLAG_MAX
 };
 
-#define QUEUE_FLAG_MQ_DEFAULT	(1UL << QUEUE_FLAG_SAME_COMP)
+#define QUEUE_FLAG_MQ_DEFAULT	((1UL << QUEUE_FLAG_SAME_COMP) |		\
+				(1UL << QUEUE_FLAG_SAME_FORCE))
 
 void blk_queue_flag_set(unsigned int flag, struct request_queue *q);
 void blk_queue_flag_clear(unsigned int flag, struct request_queue *q);
-- 
2.47.2

# 0010-XANMOD-blk-wbt-Set-wbt_default_latency_nsec-to-2msec.patch

From 287c275293025e956f2144e55de8cc51eec0811b Mon Sep 17 00:00:00 2001
From: Alexandre Frade <kernel@xanmod.org>
Date: Mon, 15 Jul 2024 04:50:34 +0000
Subject: [PATCH 10/19] XANMOD: blk-wbt: Set wbt_default_latency_nsec() to
 2msec

Signed-off-by: Alexandre Frade <kernel@xanmod.org>
---
 block/blk-wbt.c | 10 ++--------
 1 file changed, 2 insertions(+), 8 deletions(-)

diff --git a/block/blk-wbt.c b/block/blk-wbt.c
index f1754d07f7e0..d2f358f77c1f 100644
--- a/block/blk-wbt.c
+++ b/block/blk-wbt.c
@@ -727,14 +727,8 @@ EXPORT_SYMBOL_GPL(wbt_enable_default);
 
 u64 wbt_default_latency_nsec(struct request_queue *q)
 {
-	/*
-	* We default to 2msec for non-rotational storage, and 75msec
-	* for rotational storage.
-	*/
-	if (blk_queue_nonrot(q))
-		return 2000000ULL;
-	else
-		return 75000000ULL;
+	/* XanMod defaults to 2msec for any type of storage */
+	return 2000000ULL;
 }
 
 static int wbt_data_dir(const struct request *rq)
-- 
2.47.2

# 0013-XANMOD-mm-Raise-max_map_count-default-value.patch

From 653701587608c8113dd4c941526104cea83d697e Mon Sep 17 00:00:00 2001
From: Alexandre Frade <kernel@xanmod.org>
Date: Sun, 28 Apr 2024 09:06:54 +0000
Subject: [PATCH 13/19] XANMOD: mm: Raise max_map_count default value

Signed-off-by: Alexandre Frade <kernel@xanmod.org>
---
 Documentation/admin-guide/sysctl/vm.rst |  2 +-
 include/linux/mm.h                      | 11 ++++++-----
 2 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/Documentation/admin-guide/sysctl/vm.rst b/Documentation/admin-guide/sysctl/vm.rst
index 8290177b4f75..9c4ccef062cc 100644
--- a/Documentation/admin-guide/sysctl/vm.rst
+++ b/Documentation/admin-guide/sysctl/vm.rst
@@ -470,7 +470,7 @@ While most applications need less than a thousand maps, certain
 programs, particularly malloc debuggers, may consume lots of them,
 e.g., up to one or two maps per allocation.
 
-The default value is 65530.
+The XanMod default value is 2147483642.
 
 
 mem_profiling
diff --git a/include/linux/mm.h b/include/linux/mm.h
index fdda6b16263b..18c08844c8c0 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -179,17 +179,18 @@ static inline void __mm_zero_struct_page(struct page *page)
  *
  * When a program's coredump is generated as ELF format, a section is created
  * per a vma. In ELF, the number of sections is represented in unsigned short.
- * This means the number of sections should be smaller than 65535 at coredump.
+ * This means the number of sections should be smaller than 2147483647 at
+ * coredump.
  * Because the kernel adds some informative sections to a image of program at
  * generating coredump, we need some margin. The number of extra sections is
  * 1-3 now and depends on arch. We use "5" as safe margin, here.
  *
- * ELF extended numbering allows more than 65535 sections, so 16-bit bound is
- * not a hard limit any more. Although some userspace tools can be surprised by
- * that.
+ * ELF extended numbering allows more than 2147483647 sections, so 16-bit bound
+ * is not a hard limit any more. Although some userspace tools can be surprised
+ * by that.
  */
 #define MAPCOUNT_ELF_CORE_MARGIN	(5)
-#define DEFAULT_MAX_MAP_COUNT	(USHRT_MAX - MAPCOUNT_ELF_CORE_MARGIN)
+#define DEFAULT_MAX_MAP_COUNT	(INT_MAX - MAPCOUNT_ELF_CORE_MARGIN)
 
 extern int sysctl_max_map_count;
 
-- 
2.47.2

# 0015-XANMOD-sched-autogroup-Add-kernel-parameter-and-conf.patch

From d5b37aa9862773c0cdf95676cc15d97416311ba2 Mon Sep 17 00:00:00 2001
From: Alexandre Frade <kernel@xanmod.org>
Date: Wed, 15 Jun 2022 17:07:29 +0000
Subject: [PATCH 15/19] XANMOD: sched/autogroup: Add kernel parameter and
 config option to enable/disable autogroup feature by default

Signed-off-by: Alexandre Frade <kernel@xanmod.org>
---
 Documentation/admin-guide/kernel-parameters.txt |  6 ++++--
 init/Kconfig                                    | 12 ++++++++++++
 kernel/sched/autogroup.c                        |  9 ++++++---
 3 files changed, 22 insertions(+), 5 deletions(-)

diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index 8f75ec177399..b81c9a411105 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -507,6 +507,10 @@
 			Format: <int> (must be >=0)
 			Default: 64
 
+	autogroup=	[KNL] Enable or disable scheduler automatic task group
+			creation.
+			Format: <bool>
+
 	bau=		[X86_UV] Enable the BAU on SGI UV.  The default
 			behavior is to disable the BAU (i.e. bau=0).
 			Format: { "0" | "1" }
@@ -4084,8 +4088,6 @@
 
 	noapictimer	[APIC,X86] Don't set up the APIC timer
 
-	noautogroup	Disable scheduler automatic task group creation.
-
 	nocache		[ARM,EARLY]
 
 	no_console_suspend
diff --git a/init/Kconfig b/init/Kconfig
index bf3a920064be..95fbc47dfdc7 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1374,6 +1374,18 @@ config SCHED_AUTOGROUP
 	 desktop applications.  Task group autogeneration is currently based
 	 upon task session.
 
+config SCHED_AUTOGROUP_DEFAULT_ENABLED
+	bool "Enable automatic process group scheduling feature"
+	default y
+	depends on SCHED_AUTOGROUP
+	help
+	 If set, automatic process group scheduling will be enabled per
+	 default but can be disabled through passing autogroup=0 on the
+	 kernel commandline during boot or a value of 0 via the file
+	 proc/sys/kernel/sched_autogroup_enabled.
+
+	 If unsure say Y.
+
 config RELAY
 	bool "Kernel->user space relay support (formerly relayfs)"
 	select IRQ_WORK
diff --git a/kernel/sched/autogroup.c b/kernel/sched/autogroup.c
index 2b331822c7e7..7a118cc0ad77 100644
--- a/kernel/sched/autogroup.c
+++ b/kernel/sched/autogroup.c
@@ -4,7 +4,8 @@
  * Auto-group scheduling implementation:
  */
 
-unsigned int __read_mostly sysctl_sched_autogroup_enabled = 1;
+unsigned int __read_mostly sysctl_sched_autogroup_enabled =
+		IS_ENABLED(CONFIG_SCHED_AUTOGROUP_DEFAULT_ENABLED) ? 1 : 0;
 static struct autogroup autogroup_default;
 static atomic_t autogroup_seq_nr;
 
@@ -219,11 +220,13 @@ void sched_autogroup_exit(struct signal_struct *sig)
 
 static int __init setup_autogroup(char *str)
 {
-	sysctl_sched_autogroup_enabled = 0;
+	unsigned long enabled;
+	if (!kstrtoul(str, 0, &enabled))
+		sysctl_sched_autogroup_enabled = enabled ? 1 : 0;
 
 	return 1;
 }
-__setup("noautogroup", setup_autogroup);
+__setup("autogroup=", setup_autogroup);
 
 #ifdef CONFIG_PROC_FS
 
-- 
2.47.2
